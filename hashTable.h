/**
* hashTable.h
* Dyangelo Grullon
*
* HashTable
*
* A Hash Table ADT using multiple data types, resizing capabilities and
* user-specified hashing.
*/

#include <stddef.h>

#ifndef _HASHTABLE_H_
#define _HASHTABLE_H_

#ifndef  _HASH_IMPL_
//The HashTable data structure
typedef struct Hash_Table{ } *HashTable;
#endif


/**
* The init method for the HashTable ADT. Creates an empty hash table from a given hash
* function pointer. Initializes values to 0.
*/
HashTable ht_create(unsigned int (*hash)( const void *key, unsigned int size ) );

/**
* Returns 1 if the key provided is stored in the Hash Table. 0 Otherwise.
*/
int ht_contains( void *key, HashTable table);

/**
* Frees all memory for any allocated component of the Hash Table.
*/
void ht_destroy(HashTable table);

/**
* Removes all elements of the HashTable. Initializes elements to 0.

*/
void ht_clear(HashTable table);  //not used in amigonet.

/**
* Adds a new element to the Hash Table based on the key and the hash value that is
* generated by the Hash Function provided. Resizes memory dynamically.
*/
int ht_add(void *key, void *data, HashTable table);

/**
* Removes a single element from the Hash Table based on the key and the hash value
* that is generated by the Hash Function provided. Returns the data value if found,
* and a NULL pointer otherwise. Must be freed elsewhere.
*/
void *ht_remove( void *key, HashTable table);

/**
* Retrieves the data associated with a key provided. Returns NULL if the data is not
* found.
*/
void *ht_get( void *key, HashTable table);

/**
* Returns a pointer to void pointers containing all of the keys in given Hash Table.
* Must be freed elsewhere.
*/
void **ht_keys(HashTable table);

/**
* Returns the total number of elements in the Hash Table given.
*/
unsigned int ht_count(HashTable table);

/**
* Returns the total capacity of the data structure which holds the Hash Table in
* Bytes.
*/
unsigned int ht_capacity(HashTable table);

#endif
